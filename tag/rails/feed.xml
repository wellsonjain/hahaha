<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>規矩與秩序: rails</title>
  <subtitle>Posts tagged with rails</subtitle>
  <id>http://wellsonjain.github.io</id>
  <link href="http://wellsonjain.github.io"/>
  <link href="http://wellsonjain.github.io/tag/rails/feed.xml" rel="self"/>
  <updated>2015-05-05T19:03:00+10:00</updated>
  <author>
    <name>wellsonjain</name>
  </author>
  <entry>
    <title>Rails API (1)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/05/rails-api-part1/"/>
    <id>http://wellsonjain.github.io/2015/05/05/rails-api-part1/</id>
    <published>2015-05-05T19:03:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">
You take your life in your own hands, and what happens? A terrible thing, no one to blame. - Erica Jong


對於 API 的製作一直是我的軟肋，不對啊事實上什麼都是軟肋啊!!!(抱頭哭喊) 不過這樣一直懞懞懂懂下去好像也不是辦法，最近在看 Code School 的 Rails API 課程覺得收穫良多，於是來記錄一下幾個蠻重要的部分，但是由於這個課程屬於比較進階的，所以會以一邊寫 Testing</summary>
  </entry>
  <entry>
    <title>Rails API (2)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/06/rails-api-part2/"/>
    <id>http://wellsonjain.github.io/2015/05/06/rails-api-part2/</id>
    <published>2015-05-06T16:47:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">
So many of our dreams at first seem impossible. Then they seem improbable. And then, when we summon the will, they soon become inevitable. - Nelson Mandela


Resource

在上一篇裡面使用到 Resouces，在 Rails 裡面 Resource 我覺得是蠻神奇的，這樣就可以自動產生出預設的 HTTP verb，可是到底 Resource</summary>
  </entry>
  <entry>
    <title>Rails API (3)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/06/rails-api-part3/"/>
    <id>http://wellsonjain.github.io/2015/05/06/rails-api-part3/</id>
    <published>2015-05-06T21:59:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">
There is nothing impossible to him who will try. - Alexander the Great


Content Negotiation

API 基本上會介接許多種裝置，可能是電腦也可能是手機，因為無法預期是由誰來呼叫，所以必須先設計好要回丟什麼樣格式的資料，在 Rails 便提供了這樣的功能，
# config/routes.rb
  resouces :recipes

# http://api.myrecipe.com/recipes.json</summary>
  </entry>
  <entry>
    <title>Rails API (4)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/06/rails-api-part4/"/>
    <id>http://wellsonjain.github.io/2015/05/06/rails-api-part4/</id>
    <published>2015-05-06T23:07:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">
Look up at the stars and not down at your feet. Try to make sense of what you see, and wonder about what makes the universe exist. Be curious. - Stephen Hawking


POST

談完了如何讀取資料，接下來談的是如何新增資料，在 HTTP verb 當中，新增資料所使用的是 POST，而新增成功的 status code 201 - Created</summary>
  </entry>
  <entry>
    <title>Rails API (5)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/07/rails-api-part5/"/>
    <id>http://wellsonjain.github.io/2015/05/07/rails-api-part5/</id>
    <published>2015-05-07T15:15:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">API Versioning

隨著時間的推進，系統架構也會逐漸地成長，所以可能我們在新增一些功能的時候給新客戶的時候，會對於舊客戶有所影響，這時候比較好的做法就是把兩者切開，舊客戶使用 v1，新客戶使用 v2，這時候 namespace 就剛好能夠解決這個問題
# config/routes.rb
namespace :v1 do
  resources :recipes    # http://apo.myrecipe.com/v1/recipes
end

namespace :v2 do</summary>
  </entry>
  <entry>
    <title>Rails API (6)</title>
    <link rel="alternate" href="http://wellsonjain.github.io/2015/05/08/rails-api-part6/"/>
    <id>http://wellsonjain.github.io/2015/05/08/rails-api-part6/</id>
    <published>2015-05-08T11:31:00+10:00</published>
    <updated>2016-05-29T22:43:50+10:00</updated>
    <author>
      <name>wellsonjain</name>
    </author>
    <summary type="html">
Everything around you that you call life was made up by people, and you can change it - Steve Jobs


這是這個 API 系列文的最後一篇，最後要談的是 Authentication，前一陣子有機會接觸 Doorkeeper 覺得 Oauth 這根本是外星知識阿!! 而且就算看了網路上以鴨七介紹的最為仔細的系列文，依然看不懂，不過真的是自己的基礎不夠，所以之後會再一次的深入研究，會再記錄下來。

</summary>
  </entry>
</feed>
